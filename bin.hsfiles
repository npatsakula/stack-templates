{-# START_FILE package.yaml #-}

name: {{ name }}
version: '0.0.0'
license: MIT

author: "{{author-name}}{{^author-name}}Patsakula Nikita{{/author-name}}"
maintainer: "{{author-name}}{{^author-name}}Patsakula Nikita{{/author-name}}"

# synopsis: ""
# description: ""
# category: Other

extra-source-files:
- LICENSE.md
- package.yaml
- README.md
- stack.yaml

ghc-options: -Wall

library:
  dependencies:
  - base
  - relude
  source-dirs: library

executables:
  {{ name }}:
    source-dirs: executable
    main: Main.hs
    dependencies:
    - base
    - relude
    - {{ name }}
    ghc-options:
    - -O2
    - -threaded
    - -rtsopts
    - -with-rtsopts=--nonmoving-gc -threaded -H24m

benchmarks:
  {{ name }}-benchmarks:
    source-dirs: benchmark
    main: Main.hs
    dependencies:
    - base
    - relude
    - {{ name }}
    - criterion
    ghc-options:
    - -O2
    - -threaded
    - -rtsopts
    - -with-rtsopts=--nonmoving-gc -threaded -H24m

tests:
  {{ name }}-test-suite:
    source-dirs: test-suite
    main: Main.hs
    dependencies:
    - base
    - {{ name }}
    - relude
    - tasty
    - tasty-hspec
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N


{-# START_FILE .gitignore #-}
# Stack uses this directory as scratch space.
/.stack-work/
# Stack generates the Cabal file from `package.yaml` through hpack.
/*.cabal

{-# START_FILE LICENSE.md #-}
[The MIT License (MIT)][]

Copyright (c) {{year}}{{^year}}2021{{/year}} {{author-name}}{{^author-name}}Patsakula Nikita{{/author-name}}

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

[The MIT License (MIT)]: https://opensource.org/licenses/MIT

{-# START_FILE README.md #-}
Fill me, senpai!

``` sh
# Build the project.
stack build

# Run the test suite.
stack test

# Run the benchmarks.
stack bench

# Generate documentation.
stack haddock
```

{-# START_FILE benchmark/Main.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

import Criterion.Main
import Relude

main :: IO ()
main = defaultMain [bench "const" (whnf const ())]

{-# START_FILE executable/Main.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

import qualified Example
import Relude

main :: IO ()
main = Example.main

{-# START_FILE library/Example.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

module Example (main) where

import Relude

main :: IO ()
main = return ()

{-# START_FILE test-suite/Main.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}

import qualified Test.Tasty
import Test.Tasty.Hspec

import Relude

main :: IO ()
main = do
    test <- testSpec "{{ name }}" spec
    Test.Tasty.defaultMain test

spec :: Spec
spec = parallel $ do
    it "is trivially true" $ do
        True `shouldBe` True
